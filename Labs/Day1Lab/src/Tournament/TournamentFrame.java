/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Tournament;

import java.util.ArrayList;

/**
 *
 * @author jbaptist
 */
public class TournamentFrame extends javax.swing.JFrame {

    private final int BAD_INPUT = -1;
    /**
     * Creates new form TournamentFrame
     */
    public TournamentFrame() {
        initComponents();
        setVisible(true);
        setTitle("Tournament");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tournamentInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tournamentField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tournamentInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tournamentInputActionPerformed(evt);
            }
        });

        tournamentField.setColumns(20);
        tournamentField.setRows(5);
        jScrollPane1.setViewportView(tournamentField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(tournamentInput, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(tournamentInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tournamentInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tournamentInputActionPerformed
        tournamentField.setText("");
        String input = tournamentInput.getText();
        System.out.println("input = " + input);
        int n = getMeGoodInput(input);
        if (n != BAD_INPUT && powerOfTwo(n)) {
            doStuff(n);
        } else {
            
            tournamentField.setText("not a power of 2, dumbass");
            
        }
        prepareForInput();
    }//GEN-LAST:event_tournamentInputActionPerformed

    private void doStuff(int n) {
        ArrayList<Integer> list = new ArrayList<Integer>();
        list.add(1); 
        list.add(2);
        while(list.size() != n) {
            
            list = twoTimes(list);
            
        }
        Integer[] finalList = new Integer[list.size()];
        finalList = list.toArray(finalList);
        display(finalList);
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea tournamentField;
    private javax.swing.JTextField tournamentInput;
    // End of variables declaration//GEN-END:variables

 private int getMeGoodInput(String input) {
        int returnMe = BAD_INPUT;

        try {
            returnMe = Integer.parseInt(input);
        } catch (Exception e) {
            System.out.println("hey! type a number!");
            return returnMe;
        }
        return returnMe;
    }

    private void display(Integer[] list) {
        for (int i = 0; i < list.length; i = i+2) {
            
            tournamentField.append("" + list[i] + "\n");
            tournamentField.append("" + list[i+1] + "\n");
            tournamentField.append("" + "\n");
                    
            
        }
    }

    void prepareForInput() {
        tournamentInput.selectAll();
        tournamentInput.requestFocus();
    }

    private static boolean powerOfTwo(int n) {
        int dum = n ;
        
        if (dum == 2) {
        
            return true;
        
        } else {
            
                     
            while(dum % 2 == 0 && dum > 2) {
            
                dum = dum/2 ;
            
                if(dum == 2) {
                
                    return true ;
                
                }
            
            }
            return false ;
            
        }
        
    }

    public static void main(String[] args) {
        for (int i=1; i<266; i++) {
//            System.out.println("i = " + i);
            if (powerOfTwo(i))
                System.out.println("i = " + i);
        }
    }

    private ArrayList twoTimes(ArrayList list) {
       
        int N = list.size() * 2 + 1 ;
        ArrayList<Integer> newlist = new ArrayList();
        for(int i = 0; i <= list.size()-1; i++) {
            
            int x = Integer.parseInt("" + list.get(i));   
            
            if((i+1) % 2 == 0) {

               newlist.add(N-x);
               newlist.add(x);
               
                
            } else {

               newlist.add(x);
               newlist.add(N-x);
                
            }
            
        }
        return newlist ;
        
    }
        
}


